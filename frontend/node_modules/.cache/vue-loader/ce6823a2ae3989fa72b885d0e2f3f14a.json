{"remainingRequest":"D:\\учеба\\JavaScript\\demo\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\учеба\\JavaScript\\demo\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\учеба\\JavaScript\\demo\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\учеба\\JavaScript\\demo\\frontend\\src\\components\\home\\v-cont.vue?vue&type=template&id=12e05ef9&scoped=true&","dependencies":[{"path":"D:\\учеба\\JavaScript\\demo\\frontend\\src\\components\\home\\v-cont.vue","mtime":1606058722389},{"path":"D:\\учеба\\JavaScript\\demo\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\учеба\\JavaScript\\demo\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\учеба\\JavaScript\\demo\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\учеба\\JavaScript\\demo\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}